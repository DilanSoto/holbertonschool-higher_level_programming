# 5-text_indentation.txt
# python3 -m doctest -v ./tests/5-text_indentation.txt

Importing function from module:

    >>> text_indentation = __import__('5-text_indentation').text_indentation

Printing long strings

    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

Printing word with spaces

    >>> text_indentation("    Hannibal    ")
    Hannibal

Printing word with spaces and special chars

    >>> text_indentation("    Mejbri    .")
    Mejbri.
    <BLANKLINE>

Printing special chars

    >>> text_indentation(".?:")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

Passing None

    >>> text_indentation(None)
    Traceback (most recent call last):
    	      ...
    TypeError: text must be a string

Passing numbers

    >>> text_indentation(13)
    Traceback (most recent call last):
    	      ...
    TypeError: text must be a string

Printing strings with special chars

    >>> text_indentation("Hannibal: Best? Tunis star. maybe   ")
    Hannibal:
    <BLANKLINE>
    Best?
    <BLANKLINE>
    Tunis star.
    <BLANKLINE>
    maybe

Printing int as char

    >>> text_indentation('13')
    13

Passing empty string

    >>> text_indentation('    ')

Passing new line character \n

    >>> text_indentation('\n')
    <BLANKLINE>

Passing system special chars

    >>> text_indentation('\n.\n?\n:')
    <BLANKLINE>
    .
    <BLANKLINE>
    <BLANKLINE>
    ?
    <BLANKLINE>
    <BLANKLINE>
    :
    <BLANKLINE>

Passing text with spaces and new line char

    >>> text_indentation("   \n")
    <BLANKLINE>

Passing text with spaces and new line char in the middle

   >>> text_indentation("   \n   ")
   <BLANKLINE>

Passing text with spaces and new line at beginning

   >>> text_indentation("\n   ")
   <BLANKLINE>

Test other data types:
     >>> text_indentation(-90)
     Traceback (most recent call last):
     ...
     TypeError: text must be a string
    